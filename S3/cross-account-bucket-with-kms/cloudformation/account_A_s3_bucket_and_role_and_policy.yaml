AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Create a S3 bucket in account-a, for account-b's role to upload objects, and account-c's role to download objects.

Parameters:
  BucketName:
    Description: The name of the S3 bucket to be created.
    Type: String
    Default: k-shared-cross-account-bucket
  AccountAKeyAdminRoleArn:
    Description: The ARN of a user in account A managing kms keys
    Type: String
  AccountARoleName:
    Description: The name of the role for assuming from other accounts to read the objects
    Type: String
    Default: k-shared-cross-account-bucket-readonly-role
  AccountBUserArn:
    Description: The ARN of a role in account B for uploading files to the shared bucket in account A
    Type: String
    Default: arn:aws:iam::222222222222:user/cross-account-s3-upload
  AccountCUserArn:
    Description: The ARN of a the root of account C as the principal for downloading B's files from the shared bucket in account A
    Type: String
    Default: arn:aws:iam::333333333333:root

Resources:
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AccountARoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Ref AccountCUserArn
            Action:
              - "sts:AssumeRole"

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: "kms:*"
            Resource: "*"

          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: !Ref AccountAKeyAdminRoleArn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"

          # Even if the user has permission to decrypt the key in their IAM policy, the user still needs the
          # permission on the key policy for the download to work.
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt IamRole.Arn
                - !Ref AccountBUserArn
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
            Resource: "*"

  KmsAlias:
    Type: AWS::KMS::Alias
    DependsOn: KmsKey
    Properties:
      AliasName: !Join ["", ["alias/", !Ref BucketName, "-kms"]]
      TargetKeyId: !Ref KmsKey

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: KmsKey
    Properties:
      BucketName: !Ref BucketName
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref KmsKey
    DeletionPolicy: Retain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3Bucket
    Properties:
      Bucket: !Ref "S3Bucket"
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Ref AccountBUserArn
          Action:
            - s3:ListBucket
          Resource:
            - !GetAtt S3Bucket.Arn
        - Effect: Allow
          Principal:
            AWS:
            - !Ref AccountBUserArn
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
          Resource:
            - !Join ['/',[!GetAtt S3Bucket.Arn, '*']]

        - Effect: Deny
          Principal: "*"
          Action:
            - s3:PutObject
          Condition:
            StringNotLike:
              s3:x-amz-server-side-encryption-aws-kms-key-id: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
          Resource:
            - !Join ['/',[!GetAtt S3Bucket.Arn, '*']]

  S3ReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - IamRole
      - S3Bucket
    Properties:
      Description: "Allow to decrypt the AWS KMS key and also download from the S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt S3Bucket.Arn

          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Join ['/',[!GetAtt S3Bucket.Arn, '*']]

          # Even if the user has permission to decrypt the key in their IAM policy, the user still needs the
          # permission on the key policy for the download to work.
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
            Resource:
              - !GetAtt KmsKey.Arn
      Roles:
        - !Ref IamRole

Outputs:
  IamRoleArn:
    Description: RoleArn
    Value: !GetAtt IamRole.Arn

  S3BucketArn:
    Description: S3BucketArn
    Value: !GetAtt S3Bucket.Arn

  KmsKeyArn:
    Description: KmsKeyArn
    Value: !GetAtt KmsKey.Arn
