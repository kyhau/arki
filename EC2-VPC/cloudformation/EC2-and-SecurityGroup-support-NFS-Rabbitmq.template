{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Create an EC2 instance with an additional volume and Security Group supporting NFS and Rabbitmq ports.",

  "Parameters": {
    "EC2Name": {
      "Description": "The name of the EC2.",
      "Type": "String"
    },
    "AMI": {
      "Description": "The AMI ID of the image that the EC2 instance to be created from (check latest Ubuntu AMI image).",
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-4e686b2d"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "InstanceRole": {
      "Description": "Instance IAM Role.",
      "Type": "String",
      "Default": "devops",
      "AllowedValues": ["devops"],
      "ConstraintDescription": "must be a valid IAM Role."
    },
    "SubnetID": {
      "Description": "Subnet ID of the solver servers.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "VpcID": {
      "Description": "VPC ID of solver servers.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "ServiceTag": {
      "Description": "Value of the tag Service.",
      "Type": "String",
      "Default": "production",
      "AllowedValues": ["production", "staging"],
      "ConstraintDescription": "must be a predefined tag."
    },
    "RabbitCIDR": {
      "Description": "IP Address range of the Rabbit MQ (e.g. 62.77.0.0/16).",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "NfsCIDR": {
      "Description": "IP Address range of the NFS server (e.g. 62.77.0.0/16).",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VpnCIDR": {
      "Description": "IP Address range of the VPN server (e.g. 62.99.0.0/16.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources": {

    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VpcID" },
        "GroupDescription": {"Ref": "EC2Name" },
        "SecurityGroupIngress": [
          {"IpProtocol": "icmp", "FromPort": "0", "ToPort": "-1", "CidrIp": "0.0.0.0/0" },
          {"IpProtocol": "icmp", "FromPort": "8", "ToPort": "-1", "CidrIp": "0.0.0.0/0" },
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "VpnCIDR" } },
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" },
          {"IpProtocol": "tcp", "FromPort": "2049", "ToPort": "2049", "CidrIp": {"Ref": "NfsCIDR" } },
          {"IpProtocol": "tcp", "FromPort": "5672", "ToPort": "5672", "CidrIp": {"Ref": "RabbitCIDR" } }
        ],
        "SecurityGroupEgress": [
          {"IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
        ],
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackName" } },
          {"Key": "Name",  "Value": {"Ref": "EC2Name" } },
          {"Key": "Service", "Value": {"Ref": "ServiceTag"} }
        ]
      }
    },
    "ServerSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {"Ref": "SecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {"Ref": "SecurityGroup" } ,
        "SourceSecurityGroupOwnerId": {"Ref": "AWS::AccountId" }
      }
    },

    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": ["SecurityGroup"],
      "Metadata": {"Comment": "EC2" },
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": {"Ref": "AMI" },
        "InstanceType": {"Ref": "InstanceType" },
        "IamInstanceProfile": {"Ref": "InstanceRole" },
        "KeyName": {"Ref": "KeyName" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {"VolumeType": "gp2", "VolumeSize": "20", "DeleteOnTermination": "false"}
          }
        ],
        "Monitoring": "false",
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination": "true",
          "Description": "Primary network interface",
          "DeviceIndex": 0,
          "GroupSet": [{"Ref": "SecurityGroup" }],
          "SubnetId": {"Ref": "SubnetID" }
        }],
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackName"} },
          {"Key": "Name", "Value": {"Ref": "EC2Name"} },
          {"Key": "Inspect", "Value": "ALL" },
          {"Key": "Service", "Value": {"Ref": "ServiceTag"} }
        ]
      }
    },

    "EBSVolumeSdf": {
      "Type": "AWS::EC2::Volume",
      "DependsOn": "EC2Instance",
      "Properties": {
        "Size": "200",
        "VolumeType": "standard",
        "Encrypted": "false",
        "AvailabilityZone": {"Fn::GetAtt": [ "EC2Instance", "AvailabilityZone" ] },
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackName"} },
          {"Key": "Name", "Value": {"Fn::Join": ["", [{"Ref": "EC2Name"}, "-sdf"]]} },
          {"Key": "Service", "Value": {"Ref": "ServiceTag"} }
        ]
      },
      "DeletionPolicy": "Snapshot"
    },
    "VolumeAttachmentSdf": {
      "Type": "AWS::EC2::VolumeAttachment",
      "DependsOn": "EBSVolumeSdf",
      "Properties": {
        "Device": "/dev/sdf",
        "InstanceId": {"Ref": "EC2Instance" },
        "VolumeId": {"Ref": "EBSVolumeSdf"}
      }
    },

    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": ["EC2Instance"],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {"Ref": "EC2Instance" }
      }
    }
  },

  "Outputs": {
    "PublicIP": {
      "Description": "The public IP address of the instance.",
      "Value": {"Fn::GetAtt": [ "EC2Instance", "PublicIp" ] }
    },
    "PrivateIP": {
      "Description": "The private IP address of the instance.",
      "Value": {"Fn::GetAtt": [ "EC2Instance", "PrivateIp" ] }
    }
  }
}
